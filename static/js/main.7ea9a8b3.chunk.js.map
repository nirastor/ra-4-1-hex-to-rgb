{"version":3,"sources":["App.jsx","utils/isInputValid.js","utils/createRGB.js","index.js"],"names":["App","useState","input","setInput","message","validaton","text","result","err","length","i","search","validateInput","style","rgbString","r","parseInt","slice","g","b","string","createRGB","backgroundColor","className","type","value","onChange","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NA4CeA,MA/Bf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KAOTC,EAAU,oDAERC,ECtBO,SAAuBC,GACpC,IAAKA,EACH,MAAO,CACLC,QAAQ,EACRC,IAAK,4GAIT,GAAoB,IAAhBF,EAAKG,OACP,MAAO,CACLF,QAAQ,EACRC,IAAK,gOAIT,GAAgB,MAAZF,EAAK,GACP,MAAO,CACLC,QAAQ,EACRC,IAAK,uNAIT,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAC1B,IAAuC,IAAnCJ,EAAKI,GAAGC,OAAO,eACjB,MAAO,CACLJ,QAAQ,EACRC,IAAK,uQAKX,MAAO,CAAED,QAAQ,GDTCK,CAAcV,GAC1BW,EAAQ,GACd,GAAKR,EAAUE,OAER,CACL,IAAMO,EE3BK,SAAmBR,GAChC,IAAMS,EAAIC,SAASV,EAAKW,MAAM,EAAG,GAAI,IAC/BC,EAAIF,SAASV,EAAKW,MAAM,EAAG,GAAI,IAC/BE,EAAIH,SAASV,EAAKW,MAAM,EAAG,GAAI,IACrC,MAAO,CACLF,IACAG,IACAC,IACAC,OAAO,OAAD,OAASL,EAAT,aAAeG,EAAf,aAAqBC,EAArB,MFmBYE,CAAUnB,GAAOkB,OACnChB,EAAUU,EACVD,EAAMS,gBAAkBR,OAJxBV,EAAUC,EAAUG,IAOtB,OACE,qBAAKe,UAAU,cAAcV,MAAOA,EAApC,SACE,sBAAKU,UAAU,eAAf,UACE,+BACE,uBAAOA,UAAU,QAAQC,KAAK,OAAOC,MAAOvB,EAAOwB,SApBvC,SAACC,GACnBxB,GAAS,kBAAMwB,EAAEC,OAAOH,cAqBpB,qBAAKF,UAAU,iBAAf,SAAiCnB,UGhCzCyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.7ea9a8b3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport createRGB from './utils/createRGB';\nimport validateInput from './utils/isInputValid';\n\n/*\n  В прошлом задании было прям очевидно как поделить\n  Здесь кажется пока проще одним компонетом\n\n  На само деле много вопросов как правильно делить функционал\n  Должна лифункция валидации отдавать true или false и только потом если false то вызывать\n*/\n\nfunction App() {\n  const [input, setInput] = useState('');\n\n  const handleInput = (e) => {\n    setInput(() => e.target.value);\n  };\n\n  let message = 'Все верно';\n\n  const validaton = validateInput(input);\n  const style = {};\n  if (!validaton.result) {\n    message = validaton.err;\n  } else {\n    const rgbString = createRGB(input).string;\n    message = rgbString;\n    style.backgroundColor = rgbString;\n  }\n\n  return (\n    <div className=\"full-screen\" style={style}>\n      <div className=\"center-block\">\n        <form>\n          <input className=\"input\" type=\"text\" value={input} onChange={handleInput} />\n        </form>\n        <div className=\"result-message\">{message}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export default function validateInput(text) {\n  if (!text) {\n    return {\n      result: false,\n      err: 'Введите hex. Например #ff33a5',\n    };\n  }\n\n  if (text.length !== 7) {\n    return {\n      result: false,\n      err: 'Жду 7 символов вместе с решеткой. Например #123456',\n    };\n  }\n\n  if (text[0] !== '#') {\n    return {\n      result: false,\n      err: 'Hex должен начинаться с символа #. Например #ff33a5',\n    };\n  }\n\n  for (let i = 1; i < 7; i += 1) {\n    if (text[i].search(/[0-9a-fA-F]/) === -1) {\n      return {\n        result: false,\n        err: 'Hex может содержать только символы 0-9, a-f или A-F. Например #ab09ef',\n      };\n    }\n  }\n\n  return { result: true };\n}\n","export default function createRGB(text) {\n  const r = parseInt(text.slice(1, 3), 16);\n  const g = parseInt(text.slice(3, 5), 16);\n  const b = parseInt(text.slice(5, 7), 16);\n  return {\n    r,\n    g,\n    b,\n    string: `rgb(${r}, ${g}, ${b})`,\n  };\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}